return function(thisPlayer, flags, input, world, scene, game, data) {
	//Setup local variables here
	//This function will be called when player is first created
	//For executing actions when loading screen is being hidden,
	//add the method thisPlayer.onLoadingScreenOut = function(){...}
	//var myvar = flags.jumping

	var enableHold = true,
	jumping = false,
	stA = false,
	startHeight = 32768,
	A_hold = false,
	hold2 = false,
	A_holdTime = 0.08;

	//Sfx
	var jumpsfx = [
		scene.findResource('PlayerJumpSfx1', 'sound'),
		scene.findResource('PlayerJumpSfx2', 'sound'),
		scene.findResource('PlayerJumpSfx3', 'sound')
	],
	landsfx = [
		scene.findResource('PlayerLandSfx1', 'sound'),
		scene.findResource('PlayerLandSfx2', 'sound')
	];
	
	//Hold func
	var unhold = function(i,h) {
		thisPlayer.setTimeout(f => {
			!h && i.A ? (hold2 = A_hold = true, unhold(i,1)) : A_hold = false;
		},A_holdTime);
	}

	return function(thisPlayer, flags, input, world, scene, game, data) {
		//This is a loop function
		//It will be called consecutively when loadingScreenOut

		//Detect physics body overlaps
		var overlaps = thisPlayer.A_overlaps;
		!flags.inAir && (flags.inAir = true,
		flags.inPlatform = false);
		
		for (var i = 0; i < overlaps.length; i++) if (Math.round(thisPlayer.body.m_linearVelocity.y) >= 0) {
			if (overlaps[i].tags.indexOf('floor') != -1 && thisPlayer.y < overlaps[i].y - (overlaps[i].h/2)) {
				flags.inAir = false; break;
			} else if (overlaps[i].tags.indexOf('platform')>-1 && overlaps[i].playersOver[thisPlayer.name] && !flags.inPlatform && !flags.droppingPlatform) {
				flags.inAir = false; flags.inPlatform = true; break
			}
		}
	/*	if (overlaps.length == 0) {
			flags.inAir = true;
			flags.inPlatform = false;
		}*/
		
		//Hold time (fix to two jump heights)
		//--
    

		//Air state change
		if (flags.inAir != jumping) {
			jumping = flags.inAir;

			if (jumping && flags.jumpState == 0) {
				flags.jumpState = 1; //Leave ground
				flags.ducking = false;
			} else if (!jumping) {
				flags.jumpState = 0; //In ground
				startHeight = 32768;
				flags.parryActive = false;
				flags.successfulParry = false;
				flags.inDoubleJump = false;
				flags.canShootEX = true;
				flags.droppingPlatform = false;
				
				//Reset hold
				A_hold = false;
				hold2 = false;
				flags.jumpActioned = false;
				//Spawn particle
				data.spawnPlayerParticle('landDust', thisPlayer);
				//Play sfx
				landsfx[b5.Maths.randomRange(0, 1)].play();

			}


			thisPlayer.updateAnimations = true;
		}

		//Input A state change
		if (input.A && !stA && flags.controllable) {
			stA = true;
			
			//Change state for input and not hold (responsive parry)
			if (flags.jumpState == 1 && input.A) {
				flags.jumpState = 2;
			}

			//If inAir, ~~parry~~ double jump
			if (flags.inAir && flags.jumpState == 2 && !flags.dashing) {
			//	flags.parryActive = true;
			  flags.inDoubleJump = true;
				flags.jumpState = 3; //double jump
				
				//Play sfx
				jumpsfx[b5.Maths.randomRange(0, 2)].play();
				//Jump!
				thisPlayer.body.m_linearVelocity.y = !flags.dashing ? -thisPlayer.data.jumpSpeed*thisPlayer.data.doubleJumpSpeedMultiplier : 0;
			
				thisPlayer.updateAnimations = true;
				
			}
			
			//Set an initial hold time for A_holdTime
			if(input.A) {
				A_hold = true;
				flags.jumpActioned = !flags.inAir;
				unhold(input);
			}
			else {
				A_hold = false;
				hold2 = false;
			}
			
		} else if(!input.A) stA = false;

		if (flags.controllable) {
			if (A_hold && enableHold && flags.jumpState == 0 && !flags.dashing) {
				//Jump time
				if (startHeight != thisPlayer.y && !(flags.ducking && flags.inPlatform)) {
					startHeight = thisPlayer.y;
					enableHold = false;
					//Play sfx
					jumpsfx[b5.Maths.randomRange(0, 2)].play();
				} else if (flags.ducking && flags.inPlatform) {
					if (thisPlayer.data.platform != null) {
						/*Platform*/
						thisPlayer.data.platform.drop(thisPlayer);
						thisPlayer.data.platform = null;
					}
				}

			} else if (!A_hold) {
				if (flags.jumpState == 0) enableHold = true;
				else if (flags.jumpState == 1) {
					flags.jumpState = 2; //A button released
					startHeight = 32768;
				}
			}
		}
		var jumpHeight = !flags.damageHit && !flags.shootingEX ? startHeight - thisPlayer.data.jumpHeight : 32768;
		
		//Descend
		if (startHeight != 32768 && thisPlayer.y > jumpHeight)
			thisPlayer.body.m_linearVelocity.y = flags.dashing || (flags.ducking && flags.inPlatform)?  0: !flags.shootingEX ?-thisPlayer.data.jumpSpeed:0;
		else if (thisPlayer.y < jumpHeight && flags.inAir) {
			startHeight = 32768;
			A_hold = false;
		}
	};
};