return {
	BossName: function(thisActor, world, scene) {
		var difficulty = scene.data.Statistics.skill;
		
		//Explosions after Knockout
		thisActor.onDeath = function() {
			scene.events.once('after-knockout',()=>{
				scene.data.createBossExplosionsEmitter(x,y,r,t);
			});
		};
		
		//After sting, load winscreen or any other scene
		//If winscreen, pass statistics and players to evaluate grade
		scene.events.once('onfightwin:nextscene', ()=>{
			b5.Game.LoadScene('winscreen', 0, 0, {
				show_anim: 'fade',
				show_speed: 2,
				hide_anim: 'fade',
				hide_speed: 0.35,
				hourglass: false
			}, {
				stats: scene.data.Statistics,
				players: scene.data.players.activePlayers,
				fromLevelID: data.levelID
			});
		});
		
		scene.events.on('playEvent',e =>data.playEvent(e[0],e[1],true));
		
		//Event system to synchronize host and guest
		
		data.playEvent = function(evt, evtData, eventFromHost) {
			if(game.Multiplayer.isHosting)
				game.Multiplayer.sendToGuest('PLAY_EVENT',[evt,evtData,'scene',true]);
				
			if(!game.Multiplayer.isGuest || eventFromHost) switch(evt) {
				default:
				  void 0;
			}
		}
		
		//Basic defeat manager
		var dead = false;

		thisActor.onTick = function() {
			bossData = scene.data.bossData; //Fix object error in guest
			
			if (scene.data.levelData.fightStarted) {
				//Do things
				
				if (bossData.health <= 0 && !dead) {
					dead = true;
					thisActor.onDeath && thisActor.onDeath();
					scene.data.onBossDeath && scene.data.onBossDeath();
				}
			}
			
		}
		
	}
};