
b5.LoadScene = function(world, scene, data, game) {
	//scene is the main scene where resources and actors will be added
	//game is equivalent to b5.Game where there's things like the loading screen, scene loader, player, configs and	more.
	//you should add local variables on data object, for them to be removed when another scene is being loaded, for global variables add them to game or write it to a file.
  
  game.importObject('CreateLevel').init();
  game.importObject('CreatePlayer');
  
  bg = new b5.RectActor;
  bg.setSize(1280,720);
  world.findActor('Layer1').addActor(bg);
  
  data.boxes = [];
  data.timelength = 1000;
  data.boxData = [];
  data.back = false;
  
  //Create boxes
  for(var i = 0; i < 10; i++) {
  	var box = new b5.RectActor;
  	box.fill_style = "rgb("+b5.Maths.randomRange(0,255)+", "+b5.Maths.randomRange(0,255)+","+b5.Maths.randomRange(0,255)+")";
  	box.setSize(80,80);
  	box.setPosition(b5.Maths.randomRange(-200,200),-100)
  	world.findActor('Layer1').addActor(box)
  	box.initBody("dynamic",false,false);
  	box.addFixture({
  		type: b5.Shape.TypeBox,
  		width: box.w,
  		height: box.h,
  		restitution: 1.1,
  		density: 5,
  		friction: 1
  	});
  	box.name = "box-"+i;
  	box.body.SetActive(false);
  	data.boxes.push(box)
 
  }
  
};
b5.onLoadingScreenOut = function(world, scene, data, game) {
	//Called when the loading screen is fading out, here you can start animating your actors and do whatever you want!
  
  data.initializePlayers();
  
  world.setTimeout(function() {
  	for(var i = 0; i < data.boxes.length; i++) {
  		data.boxes[i].body.SetActive(1)
  	}
  }, 3);
  
  data.boxes[0].onTick = function() {
  	if(!data.back) {
      data.boxData.push( (function() {
      	for(var i = 0, b = data.boxes, a = []; i < data.boxes.length; i++) 
      	  a.push({
      	  	x: b[i].x,
      	  	y: b[i].y,
      	  	r: b[i].rotation,
      	  	lvx: b[i].body.m_linearVelocity.x,
      	  	lvy: b[i].body.m_linearVelocity.y,
      	  	av: b[i].body.m_angularVelocity
      	  });
      	 return a;
      })() );
     if(data.boxData.length > data.timelength) data.boxData.shift();
  	}
  	else {
  		var c = data.boxData[data.boxData.length-1];
  		for(var a = 0, b = data.boxes; a < data.boxes.length; a++) if(c) {
  			b[a].setPosition( c[a].x ||0, c[a].y||0);
  			b[a].setRotation( c[a].r ||0);
  			b[a].body.m_linearVelocity.x = c[a].lvx||0, 
  			b[a].body.m_linearVelocity.y = c[a].lvy||0
  			b[a].body.m_angularVelocity = c[a].av||0;
  		}
  		data.boxData.pop();
  	}
  	
  	debugText = data.boxData.length
  }
  
  scene.onBeginTouch = function() {
  	if(!data.back) {
  		data.back = true;
  		for(var i = 0; i < data.boxes.length; i++) {
      	data.boxes[i].body.SetActive(0);
    	}
  
  	}
  }
  	scene.onEndTouch = function() {
  		data.back = false;
  		for(var i = 0; i < data.boxes.length; i++) {
  			
      	data.boxes[i].body.SetActive(1);
    	}
  	}
  
 //Initialize multiplayer
 game.Multiplayer.Initialize(world,data);
 
};
b5.addSceneResources = function(scene, data, game) {
	//Resources that will be added to scene, this will be called before LoadScene
  
  var bit = new b5.Bitmap('bit',data.resourcePath + 'test.png');
  scene.addResource(bit,'bitmap');
};
b5.onSceneUnload = function(world, scene, data, game, clearResources) {
    //Called when app is about to remove the scene, if clearResources is true, that means the app will clean the resources of the scene
    //You can also remove created objects in b5.Game if they were created and used on the scene.

};
//DEPRECATED
b5.UpdateScene = function(world, scene, data, game) {
	//For updating actors and behaviors on your scene every frame

};